[
  {
    "title": "instalacion",
    "contenido":  "<h1>Instalación</h1>\n<h3>Nota de compatibilidad</h3>\n<p>Vue no es compatible con IE8 y versiones anteriores, ya que utiliza las características de\n    ECMAScript 5 que son incompatibles en IE8. Sin embargo, admite todos los navegadores compatibles\n    con ECMAScript 5.</p>\n\n<h3>Notas de lanzamiento</h3>\n<p>Última versión estable: 2.5.16</p>\n<p>Las notas de lanzamiento detalladas para cada versión están disponibles en GitHub.</p>\n\n<h2>Vue Devtools</h2>\n<p>Cuando use Vue, le recomendamos que también instale Vue Devtools en su navegador, lo que le permite inspeccionar y depurar sus aplicaciones de Vue de una manera más amigable.</p>\n\n<h2>Inclusión Directa con script</h2>\n<p>Simplemente descargue e incluya la etiqueta script con la ruta correcta. Vue será registrado como una variable global.</p>\n<p>No utilice la versión minificada (de producción) durante el desarrollo. Usted perderá todas las advertencias interesantes para los errores más comunes!</p>\n<p><b>Versión de Desarrollo</b> Mensajes de error completos y modo de depuración</p>\n<p><b>Versión de Producción</b> Sin mensajes de error, 30.90KB min+gzip</p>\n\n<h3>CDN</h3>\n<p>Es recomendable vincular a un número específico de versión que pueda actualizar manualmente:</p>\n<pre><code> <span >&lt;<span >script</span> <span >src</span>=<span >\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\"</span>&gt;</span><span >&lt;/<span >script</span>&gt;</span></code></pre>\n<p>Para producción, recomendamos vincular a un número de versión específico y compilar para evitar roturas inesperadas de versiones más nuevas:</p>\n<pre><code><span>&lt;<span>script</span> <span>src</span>=<span>\"https://cdn.jsdelivr.net/npm/vue@2.6.14\"</span>&gt;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>\n<p>Si está utilizando módulos ES nativos, también hay una compilación compatible con módulos ES:</p>\n<pre><code><span>&lt;<span>script</span> <span>type</span>=<span>\"module\"</span>&gt;</span><span class=\"javascript\">\n  <span>import</span> Vue <span>from</span> <span>'https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.esm.browser.js'</span>\n</span><span>&lt;/<span>script</span>&gt;</span></code></pre>\n<p>Puede buscar el código fuente del paquete NPM en cdn.jsdelivr.net/npm/vue .</p>\n<p>Vue también está disponible en unpkg y cdnjs (cdnjs tarda algún tiempo en sincronizarse, por lo que es posible que la última versión aún no esté disponible).</p>\n<p>Asegúrese de leer sobre las diferentes versiones de Vue y use la versión de producción\nen su sitio publicado, reemplazando vue.jscon vue.min.js. Esta es una compilación más pequeña optimizada para la velocidad en lugar de la experiencia de desarrollo.</p>\n\n<h2>NPM</h2>\n<p>NPM es el método de instalación recomendado al crear aplicaciones a gran escala con Vue. Se combina muy bien con paquetes de módulos como Webpack o Browserify . Vue también proporciona herramientas complementarias para la creación de componentes de un solo archivo .</p>\n<pre><code><span># latest stable</span>\n$ npm install vue</code></pre>\n\n<h2>CLI</h2>\n<p>Vue proporciona una CLI oficial para implementar rápidamente aplicaciones ambiciosas de una sola página. Proporciona configuraciones de compilación con baterías para un flujo de trabajo frontend moderno. Solo se necesitan unos minutos para poner en funcionamiento las compilaciones listas para producción, recarga en caliente y almacenamiento de pelusa. Consulte los documentos de la CLI de Vue para obtener más detalles.</p>\n<p>La CLI asume un conocimiento previo de Node.js y las herramientas de compilación asociadas. Si es nuevo en Vue o en las herramientas de compilación de front-end, le recomendamos encarecidamente que lea la guía sin ninguna herramienta de compilación antes de usar la CLI.</p>"
  },
  {
    "title": "Introducción",
    "contenido":  "<h1>Introducción</h1>\n<h2>¿Qué es Vue.js?</h2>\n<p>Vue es un <b>marco progresivo</b> para construir interfaces de usuario. A diferencia de otros marcos monolíticos, Vue está diseñado desde cero para ser adoptable de forma incremental. La biblioteca principal se centra solo en la capa de vista y es fácil de recoger e integrar con otras bibliotecas o proyectos existentes. Por otro lado, Vue también es perfectamente capaz de impulsar aplicaciones sofisticadas de una sola página cuando se usa en combinación con <b>herramientas modernas y bibliotecas de soporte</b> .</p>\n\n<h2>Empezando</h2>\n<p><b>Instalación</b></p>\n<blockquote>La guía oficial asume un conocimiento de nivel intermedio de HTML, CSS y JavaScript. Si es totalmente nuevo en el desarrollo de frontend, puede que no sea la mejor idea saltar directamente a un marco como primer paso: ¡aprenda los conceptos básicos y luego regrese! La experiencia previa con otros marcos ayuda, pero no es necesaria.</blockquote>\n<p>La forma más fácil de probar Vue.js es usando el <b>ejemplo de Hello World</b> . Siéntase libre de abrirlo en otra pestaña y seguirlo mientras revisamos algunos ejemplos básicos. O <b>puede crear un index.htmlarchivo</b> e incluir Vue con:</p>\n<pre><code><span>&lt;!-- development version, includes helpful console warnings --&gt;</span>\n<span>&lt;<span>script</span> <span>src</span>=<span>\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"</span>&gt;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>\n<p>o:</p>\n<pre><code><span>&lt;!-- production version, optimized for size and speed --&gt;</span>\n<span>&lt;<span>script</span> <span>src</span>=<span>\"https://cdn.jsdelivr.net/npm/vue@2\"</span>&gt;</span><span>&lt;/<span>script</span>&gt;</span></code></pre>\n<p>La página de <b>instalación</b> proporciona más opciones para instalar Vue. Nota: Nosotros no recomendamos que los principiantes comienzan con <code>vue-cli</code>, especialmente si usted todavía no está familiarizado con las herramientas de construcción basadas en Node.js.</p>\n<p>En el núcleo de Vue.js hay un sistema que nos permite renderizar datos de forma declarativa al DOM utilizando una sintaxis de plantilla sencilla:</p>\n\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app\"</span>&gt;</span><font></font>\n  {{ message }}<font></font>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br><br>\n<pre><code><span>var</span> app = <span>new</span> Vue({\n  <span>el</span>: <span>'#app'</span>,\n  <span>data</span>: {\n    <span>message</span>: <span>'Hello Vue!'</span><font></font>\n  }<font></font>\n})</code></pre>\n\n<p>¡Ya hemos creado nuestra primera aplicación Vue! Esto se parece bastante a renderizar una plantilla de cadena, pero Vue ha hecho mucho trabajo bajo el capó. Los datos y el DOM ahora están vinculados y ahora todo es <b>reactivo</b> . ¿Como sabemos? Abra la consola JavaScript de su navegador (ahora mismo, en esta página) y establezca <code>app.messageun</code> valor diferente. Debería ver el ejemplo renderizado anterior actualizado en consecuencia.</p>\n<p>Tenga en cuenta que ya no tenemos que interactuar con el HTML directamente. Una aplicación Vue se adjunta a un solo elemento DOM ( <code>#app</code> en nuestro caso) y luego lo controla por completo. El HTML es nuestro punto de entrada, pero todo lo demás sucede dentro de la instancia de Vue recién creada.</p>\n<p>Además de la interpolación de texto, también podemos vincular atributos de elementos como este:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app-2\"</span>&gt;</span>\n  <span>&lt;<span>span</span> <span>v-bind:title</span>=<span>\"message\"</span>&gt;</span><font></font>\n    Hover your mouse over me for a few seconds<font></font>\n    to see my dynamically bound title!<font></font>\n  <span>&lt;/<span>span</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br>\n<pre><code><span>var</span> app2 = <span>new</span> Vue({\n  <span>el</span>: <span>'#app-2'</span>,\n  <span>data</span>: {\n    <span>message</span>: <span>'You loaded this page on '</span> + <span>new</span> <span>Date</span>().toLocaleString()<font></font>\n  }<font></font>\n})</code></pre>\n\n<p>Aquí nos encontramos con algo nuevo. El <code>v-bin</code> datributo que está viendo se llama <b>directiva</b> . Las directivas tienen el prefijo <code>v-</code> para indicar que son atributos especiales proporcionados por Vue y, como puede haber adivinado, aplican un comportamiento reactivo especial al DOM renderizado. Aquí, básicamente está diciendo \"mantenga el <b>title</b> atributo de este elemento actualizado con la <b>message</b> propiedad en la instancia de Vue\".</p>\n<p>Si vuelve a abrir su consola JavaScript e ingresa <code>app2.message = 'some new message'</code>, verá una vez más que el HTML enlazado, en este caso el <b>title</b> atributo, se ha actualizado.</p>\n<p>También es fácil alternar la presencia de un elemento:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app-3\"</span>&gt;</span>\n  <span>&lt;<span>span</span> <span>v-if</span>=<span>\"seen\"</span>&gt;</span>Now you see me<span>&lt;/<span>span</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br>\n<pre><code><span>var</span> app3 = <span>new</span> Vue({\n  <span>el</span>: <span>'#app-3'</span>,\n  <span>data</span>: {\n    <span>seen</span>: <span class=\"hljs-literal\">true</span><font></font>\n  }<font></font>\n})</code></pre>\n<br>\n<p>Adelante, entra <code>app3.seen = false</code> en la consola. Debería ver desaparecer el mensaje.</p>\n<p>Este ejemplo demuestra que podemos vincular datos no solo a texto y atributos, sino también a la <b>estructura</b> del DOM. Además, Vue también proporciona un potente sistema de <b>efectos de transición</b> que puede aplicar automáticamente efectos de transición cuando Vue inserta / actualiza / elimina elementos.</p>\n<p>Hay bastantes otras directivas, cada una con su propia funcionalidad especial. Por ejemplo, la <code>v-for</code> directiva se puede utilizar para mostrar una lista de elementos utilizando los datos de una matriz:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app-4\"</span>&gt;</span>\n  <span>&lt;<span>ol</span>&gt;</span>\n    <span>&lt;<span>li</span> <span>v-for</span>=<span>\"todo in todos\"</span>&gt;</span><font></font>\n      {{ todo.text }}<font></font>\n    <span>&lt;/<span>li</span>&gt;</span>\n  <span>&lt;/<span>ol</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br>\n<pre><code><span>var</span> app4 = <span>new</span> Vue({\n  <span>el</span>: <span>'#app-4'</span>,\n  <span>data</span>: {\n    <span>todos</span>: [<font></font>\n      { <span>text</span>: <span>'Learn JavaScript'</span> },<font></font>\n      { <span>text</span>: <span>'Learn Vue'</span> },<font></font>\n      { <span>text</span>: <span>'Build something awesome'</span> }<font></font>\n    ]<font></font>\n  }<font></font>\n})</code></pre>\n<p>En la consola, ingrese <code>app4.todos.push({ text: 'New item' })</code>. Debería ver un nuevo elemento adjunto a la lista.</p>\n\n<h2>Manejo de la entrada del usuario</h2>\n<p>Para permitir que los usuarios interactúen con su aplicación, podemos usar la <code>v-on</code> directiva para adjuntar detectores de eventos que invocan métodos en nuestras instancias de Vue:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app-5\"</span>&gt;</span>\n  <span>&lt;<span>p</span>&gt;</span>{{ message }}<span>&lt;/<span>p</span>&gt;</span>\n  <span>&lt;<span>button</span> <span>v-on:click</span>=<span>\"reverseMessage\"</span>&gt;</span>Reverse Message<span>&lt;/<span>button</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br>\n<pre><code><span>var</span> app5 = <span>new</span> Vue({\n  <span>el</span>: <span>'#app-5'</span>,\n  <span>data</span>: {\n    <span>message</span>: <span>'Hello Vue.js!'</span><font></font>\n  },<font></font>\n  <span>methods</span>: {\n    <span>reverseMessage</span>: <span class=\"hljs-function\"><span>function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span>this</span>.message = <span>this</span>.message.split(<span>''</span>).reverse().join(<span>''</span>)<font></font>\n    }<font></font>\n  }<font></font>\n})</code></pre>\n<p>Tenga en cuenta que en este método actualizamos el estado de nuestra aplicación sin tocar el DOM: todas las manipulaciones del DOM son manejadas por Vue y el código que escribe se centra en la lógica subyacente.</p>\n<p>Vue también proporciona la v-modeldirectiva que hace que el enlace bidireccional entre la entrada del formulario y el estado de la aplicación sea muy sencillo:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app-6\"</span>&gt;</span>\n  <span>&lt;<span>p</span>&gt;</span>{{ message }}<span>&lt;/<span>p</span>&gt;</span>\n  <span>&lt;<span>input</span> <span>v-model</span>=<span>\"message\"</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br>\n<pre><code><span>var</span> app6 = <span>new</span> Vue({\n  <span>el</span>: <span>'#app-6'</span>,\n  <span>data</span>: {\n    <span>message</span>: <span>'Hello Vue!'</span><font></font>\n  }<font></font>\n})</code></pre>\n\n<h2>Componer con componentes</h2>\n<p>El sistema de componentes es otro concepto importante en Vue, porque es una abstracción que nos permite construir aplicaciones a gran escala compuestas por componentes pequeños, autónomos y, a menudo, reutilizables. Si lo pensamos bien, casi cualquier tipo de interfaz de aplicación se puede abstraer en un árbol de componentes:</p>\n<p>En Vue, un componente es esencialmente una instancia de Vue con opciones predefinidas. Registrar un componente en Vue es sencillo:</p>\n<pre><code><span>// Define a new component called todo-item</span>\nVue.component(<span>'todo-item'</span>, {\n  <span>template</span>: <span>'&lt;li&gt;This is a todo&lt;/li&gt;'</span><font></font>\n})<font></font>\n<font></font>\n<span>var</span> app = <span>new</span> Vue(...)</code></pre>\n<p>Ahora puede componerlo en la plantilla de otro componente:</p>\n<p><pre><code><span>&lt;<span>ol</span>&gt;</span>\n  <span>&lt;!-- Create an instance of the todo-item component --&gt;</span>\n  <span>&lt;<span>todo-item</span>&gt;</span><span>&lt;/<span>todo-item</span>&gt;</span>\n<span>&lt;/<span>ol</span>&gt;</span></code></pre></p>\n<p>Pero esto generaría el mismo texto para cada tarea, lo cual no es muy interesante. Deberíamos poder pasar datos del ámbito principal a los componentes secundarios. Modifiquemos la definición del componente para que acepte un <b>accesorio</b> :</p>\n<pre><code>Vue.component(<span>'todo-item'</span>, {\n  <span>// The todo-item component now accepts a</span>\n  <span>// \"prop\", which is like a custom attribute.</span>\n  <span>// This prop is called todo.</span>\n  <span>props</span>: [<span>'todo'</span>],\n  <span>template</span>: <span>'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span>\n})</code></pre>\n<p>Ahora podemos pasar la tarea a cada componente repetido usando <code>v-bind</code>:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app-7\"</span>&gt;</span>\n  <span>&lt;<span>ol</span>&gt;</span>\n    <span>&lt;!--\n      Now we provide each todo-item with the todo object\n      it's representing, so that its content can be dynamic.\n      We also need to provide each component with a \"key\",\n      which will be explained later.\n    --&gt;</span>\n    <span>&lt;<span>todo-item</span>\n      <span>v-for</span>=<span>\"item in groceryList\"</span>\n      <span>v-bind:todo</span>=<span>\"item\"</span>\n      <span>v-bind:key</span>=<span>\"item.id\"</span>\n    &gt;</span><span>&lt;/<span>todo-item</span>&gt;</span>\n  <span>&lt;/<span>ol</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<br>\n<pre><code>Vue.component(<span>'todo-item'</span>, {\n  <span>props</span>: [<span>'todo'</span>],\n  <span>template</span>: <span>'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span><font></font>\n})<font></font>\n<font></font>\n<span>var</span> app7 = <span>new</span> Vue({\n  <span>el</span>: <span>'#app-7'</span>,\n  <span>data</span>: {\n    <span>groceryList</span>: [<font></font>\n      { <span>id</span>: <span class=\"hljs-number\">0</span>, <span>text</span>: <span>'Vegetables'</span> },<font></font>\n      { <span>id</span>: <span class=\"hljs-number\">1</span>, <span>text</span>: <span>'Cheese'</span> },<font></font>\n      { <span>id</span>: <span class=\"hljs-number\">2</span>, <span>text</span>: <span>'Whatever else humans are supposed to eat'</span> }<font></font>\n    ]<font></font>\n  }<font></font>\n})</code></pre>\n<p>Este es un ejemplo artificial, pero hemos logrado separar nuestra aplicación en dos unidades más pequeñas, y el hijo está razonablemente bien desacoplado del padre a través de la interfaz de accesorios. Ahora podemos mejorar aún más nuestro <code>todo-item</code> componente con una plantilla y una lógica más complejas sin afectar la aplicación principal.</p>\n<p>En una aplicación grande, es necesario dividir toda la aplicación en componentes para que el desarrollo sea manejable. Hablaremos mucho más sobre los componentes más adelante en la guía , pero aquí hay un ejemplo (imaginario) de cómo se vería la plantilla de una aplicación con componentes:</p>\n<pre><code><span>&lt;<span>div</span> <span>id</span>=<span>\"app\"</span>&gt;</span>\n  <span>&lt;<span>app-nav</span>&gt;</span><span>&lt;/<span>app-nav</span>&gt;</span>\n  <span>&lt;<span>app-view</span>&gt;</span>\n    <span>&lt;<span>app-sidebar</span>&gt;</span><span>&lt;/<span>app-sidebar</span>&gt;</span>\n    <span>&lt;<span>app-content</span>&gt;</span><span>&lt;/<span>app-content</span>&gt;</span>\n  <span>&lt;/<span>app-view</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre>\n<h3>Relación con elementos personalizados</h3>\n<p>Es posible que haya notado que los componentes de Vue son muy similares a los <b>elementos personalizados</b> , que forman parte de la <b>especificación de componentes web</b> . Esto se debe a que la sintaxis del componente de Vue se modela libremente según la especificación. Por ejemplo, los componentes de Vue implementan la <b>API Slot</b> y el <code>is</code> atributo especial. Sin embargo, existen algunas diferencias clave:</p>\n<ul>\n  <li>La especificación de componentes web se ha finalizado, pero no se implementa de forma nativa en todos los navegadores. Safari 10.1+, Chrome 54+ y Firefox 63+ admiten componentes web de forma nativa. En comparación, los componentes de Vue no requieren polyfills y funcionan de manera consistente en todos los navegadores compatibles (IE9 y superior). Cuando sea necesario, los componentes de Vue también se pueden envolver dentro de un elemento personalizado nativo.</li>\n  <li>Los componentes de Vue brindan características importantes que no están disponibles en elementos personalizados simples, en particular el flujo de datos de componentes cruzados, la comunicación de eventos personalizados e integraciones de herramientas de construcción.</li>\n</ul>\n<p>Aunque Vue no usa elementos personalizados internamente, tiene una <b>gran interoperabilidad</b> cuando se trata de consumir o distribuir como elementos personalizados. Vue CLI también admite la creación de componentes de Vue que se registran como elementos personalizados nativos.</p>"
  },
  {
    "title": "La instancia Vue",
    "contenido":  ""
  },
  {
    "title": "Sintaxis de Template",
    "contenido":  ""
  },
  {
    "title": "Propiedades Computadas y Observadores",
    "contenido":  ""
  },
  {
    "title": "Enlace Clases y Estilos",
    "contenido":  ""
  },
  {
    "title": "Renderización Condicional",
    "contenido":  ""
  },
  {
    "title": "Renderizado de lista",
    "contenido":  ""
  },
  {
    "title": "Manejo de eventos",
    "contenido":  ""
  },
  {
    "title": "Binding en Formularios",
    "contenido":  ""
  },
  {
    "title": "Conceptos Básicos de Componentes",
    "contenido":  ""
  }
]